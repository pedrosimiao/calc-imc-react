***Na linha de comando***

PS C:\Users\simia> cd '.\Desktop\EBAC\Full Stack Python\Front-end\Modulo 28 - React\'

PS C:\Users\simia\Desktop\EBAC\Full Stack Python\Front-end\Modulo 28 - React> npm init vite@latest

Need to install the following packages:
create-vite@5.2.3
Ok to proceed? (y) y
√ Project name: ... projeto-react
√ Select a framework: » React
√ Select a variant: » JavaScript

Scaffolding project in C:\Users\simia\Desktop\EBAC\Full Stack Python\Front-end\Modulo 28 - React\projeto-react...

Done. Now run:

  cd projeto-react
  npm install
  npm run dev


PS C:\Users\simia\Desktop\EBAC\Full Stack Python\Front-end\Modulo 28 - React> cd .\projeto-react\
PS C:\Users\simia\Desktop\EBAC\Full Stack Python\Front-end\Modulo 28 - React\projeto-react> npm i

added 279 packages, and audited 280 packages in 2m

103 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities


PS C:\Users\simia\Desktop\EBAC\Full Stack Python\Front-end\Modulo 28 - React\projeto-react> npm run dev

> projeto-react@0.0.0 dev
> vite


 VITE v5.2.6  ready in 20106 ms

  ➜  Local:   http://localhost:5173/
  ➜  Network: use --host to expose
  ➜  press h + enter to show help

-----------------------------------------------------------------------------------------------------------------------

***Explicando sobre o React***

REACT -> REACT DOM -> FRONT-END NA WEB
      -> REACT NATIVE -> FRONT-END NO MOBILE

REACT TRABALHA COM UMA VIRTUAL DOM, ESSA VIRTUAL DOM GERENCIA
OS ELEMENTOS HTML.

-----------------------------------------------------------------------------------------------------------------------

***ABRIR PASTA projeto-react NO VSCODE***

***Limpando arquivos***

**Em main.jsx:**
-Remover importação do index.css -> import './index.css' 

Apagar arquivo ./src/index.css

Apagar arquivo ./src/App.css

**Em App.jsx:**
-Apagar todo o return da function App() {} deixando apenas um h1 para inicio de aula

-Remover as importações apagando os imports abaixo:

import { useState } from 'react'
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import './App.css' 

**App.jsx ficará assim:**

function App() {
  return (
    <h1>Teste</h1>
  )
}

export default App

-----------------------------------------------------------------------------------------------------------------------

***Trabalhando no App.jsx***

Não é possível haver "elementos JSX adjacentes".
Para adicionar vários elementos html numa função no caso (function App()),
é necessário "empacotar" as tags em um container, seja uma <div>, um <header>, um <footer>.
Ou como sugerido, "empacotar" ou "wrap" em um "JSX fragment" que é
simplesmente uma tag vazia <>

Portando:

function App() {
  return ( 
    <> 
      <h1>Titulo</h1>
      <h2>Subtitulo</h2>
    </>
  )
}


***Renderizando uma constante***

function App() {
  const nome = "pedro";
  return ( 
    <> 
      <h1>{nome}</h1>
      <h2>Subtitulo</h2>
    </>
  )
}

***Usando função dentro das tags***

function App() {
  const nome = "pedro";

  function retornaNome() {
    return nome;
  }


  return ( 
    <> 
      <h1>{retornaNome()}</h1>
      <h2>Subtitulo</h2>
    </>
  )
}

***Concatenações sem o uso de template strings ou sinal de '+'***

function App() {
  const nome = "pedro";

  function retornaNome() {
    return nome;
  }


  return ( 
    <> 
      <h1>Olá, {retornaNome()}</h1>
      <h2>Subtitulo</h2>
    </>
  )
}

***Acessando atributos de objetos***

function App() {
  const nome = "pedro";

  function retornaNome() {
    return nome;
  }

  // Objeto literal
  const pessoa =  {
    nome: "Maria"
  }

  return ( 
    <> 
      <h1>Olá, {pessoa.nome}</h1>
      <h2>Subtitulo</h2>
    </>
  )
}

***Condições dentro do HTML através do JSX (renderizações condicionais)***

function App() {
  const nome = "pedro";

  function retornaNome() {
    return nome;
  }

  // Objeto literal
  const pessoa =  {
    nome: "Maria"
  }

  //Renderização condicional
  let estaDeDia = true;

  return ( 
    <> 
      <h1>Olá, {pessoa.nome}</h1>
      <h2>Subtitulo</h2>
      //Opções
      {estaDeDia === true ? 'Bom dia' : 'Boa tarde'}
      {estaDeDia ? 'Bom dia' : 'Boa tarde'}
      //Retorno de expressões apenas verdadeiras
      {estaDeDia && 'Bom dia'}
    </>
  )
}


***Ponto e vírgula ';' é opcional***



-----------------------------------------------------------------------------------

***Importação e exportação de recursos do JS (React usa ECMA Script Modules)***

-Criar arquivo teste.js em src
-Instanciar const PI = 3.14;
-Criar o export:

export {
  PI
}

-Em main.jsx:
import { PI } from './teste.js'


**Multiplas exportações**

const PI = 3.14;
const GTM_BRASIL = -3;

export {
    PI,
    GTM_BRASIL
}

-Em main.jsx:
import { PI, GTM_BRASIL } from './teste.js'

ou pode-se usar um apelido para a importação:
import { PI as numeroPI, GTM_BRASIL } from './teste.js'

-Usando elemento importado:

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    {numeroPI}
    {GTM_BRASIL}
    <App />
  </React.StrictMode>,
)


**Exportações padrões**

-Criar arquivo nomes.js em src:

const nomes =  ['Gian', 'Lucas', 'Paula']

export default nomes;


-Em main.jsx:
import nomes from './nomes.js'

-No uso de export default, o nome da importação pode ser qualquer coisa
import xpto from './nomes.js'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    {xpto.length}
    <App />
  </React.StrictMode>,
)


**Importar com base no nome onde o arquivo está**
*Criando um componente (.jsx)*

-Excluir nomes.js e teste.js

-Criar uma nova pasta chamada ./src/components
-Dentro desta pasta criar uma pasta ./src/components/Perfil
-Criar componente index.jsx dentro da pasta Perfil 
(Primeira letra maiúscula por padrão para criação de componentes React, etc.)

-Um componente do React é uma função que retorna um elemento React, que é basicamente
uma mistura do HTML com o JavaScript (.jsx)

Em index.jsx:
-Pode-se criar uma function ou Arrow function

const Perfil = () => {
    //Objeto literal
    const usuario = {
        nome: 'Pedro Simião',
        avatar: 'https://github.com/pedrosimiao.png'
    }

    return (
        <div>
            <img src={usuario.avatar} />
            <h3>{usuario.nome}</h3>
        </div>
    )
}

export default Perfil;

**Importar componente index.jsx no App.jsx que é o arquivo principal do React**
*Estrutura*
1º importação
2º código do componente

Em App.jsx:
import Perfil from "./components/Perfil";

function App() {
  return ( 
    <> 
      <Perfil />
    </>
  )
}

***Estilizar componente***
-Na pasta Perfil criar um novo arquivo perfil.css
criar as classes:

.perfil-avatar {
    max-width: 180px;
    max-height: 180px;
    border-radius: 50%;
}

.perfil-titulo {
    font-family: sans-serif;
}

-Importar perfil.css em index.jsx:
import './perfil.css'

-Utilizar estilização de perfil.css em index.jsx:
Atributo className=''

return (
    <div>
      <img className='perfil-avatar' src={usuario.avatar} />
      <h3 className='perfil-titulo'>{usuario.nome}</h3>
    </div>
)


***Modificando a exportação de index.jsx para ficar menos verboso***
**Arrow function anônima direto em export default ou export default function() {...}**

import './perfil.css'

//export default function() {...}
//ou
export default () => {
    //Objeto literal
    const usuario = {
        nome: 'Pedro Simião',
        avatar: 'https://github.com/pedrosimiao.png'
    }

    return (
        <div>
            <img className='perfil-avatar' src={usuario.avatar} />
            <h3 className='perfil-titulo'>{usuario.nome}</h3>
        </div>
    )
}


-----------------------------------------------------------------------------------

***Definindo propriedades dos componentes jsx (props)***

import Perfil from "./components/Perfil";

function App() {
  return ( 
    <> 
      <Perfil nome="pedro" endereco="https://github.com/pedrosimiao" />
    </>
  )
}

export default App

**Para definir essas propriedades no componente Perfil usamos o argumento (props) 

const Perfil = (props) => {
    // Desestruturando as props
    const {endereco, nome} = props;
    
    return (
        <div>
            {JSON.stringify(props)} {/* convertendo um objeto numa string, assim podendo visualizar na tela */}
            <img className='perfil-avatar' src={endereco} />
            <h3 className='perfil-titulo'>{nome}</h3>
        </div>
    )
}

export default Perfil;

**Ou de maneira ainda mais enxuta

const Perfil = ({endereco, nome}) => {    
    return (
        <div>
            <img className='perfil-avatar' src={endereco} />
            <h3 className='perfil-titulo'>{nome}</h3>
        </div>
    )
}

export default Perfil;

-----------------------------------------------------------------------------------

***Manipulando o estado e trabalhando com eventos no React***
***Reatividade com a função useState()***
+++O useState() cria uma variável que controlará o estado do componente. Se quiser outra variável execute outro useState().+++

-Criar um novo componente ./components/Formulario/index.jsx
-Utilizar a função useState()
-O useState() vai retornar o valor e uma função para alterar esses valor
-Utilizar o atributo onChange do React nos elementos input (semelhante ao atributo html onchange)

Exemplo: Formulário de notas e cáculo de média

import { useState } from "react"

const Formulario = () => {
    let [materiaA, setMateriaA] = useState(0);
    let [materiaB, setMateriaB] = useState(0);
    let [materiaC, setMateriaC] = useState(0);
;
    const renderizaResultado = () => {
        const soma = materiaA + materiaB + materiaC;
        const media = soma / 3;

        if (media >= 7) {
            return (
                <p>Você foi aprovado</p>
            )
        } else {
            return (
                <p>Você não foi aprovado</p>
            )
        }
    }
    
    return (
        <form>
            <input type="number" placeholder="Nota matéria A" onChange={evento => setMateriaA(parseInt(evento.target.value))} />
            <input type="number" placeholder="Nota matéria B" onChange={evento => setMateriaB(parseInt(evento.target.value))} />
            <input type="number" placeholder="Nota matéria C" onChange={evento => setMateriaC(parseInt(evento.target.value))} />
            {renderizaResultado()}
        </form>
    )
}

export default Formulario

**Mesmo código porém fazendo a desestruturação do evento**

-Para a desestruturação é obrigatório o uso dos parênteses
<input type="number" placeholder="Nota matéria A" onChange={({target}) => setMateriaA(parseInt(target.value))} />


**Imutabilidade**

import { useState } from "react"

const Formulario = () => {
    let [materiaA, setMateriaA] = useState(0);
    let [materiaB, setMateriaB] = useState(0);
    let [materiaC, setMateriaC] = useState(0);
    let [nome, setNome] = useState('');

    const alteraNome = (evento) => {
        // console.log(evento.target.value);
        // setNome(evento.target.value);
        
        //Conceito de imutabilidade
        //Não se está atribuindo um valor novo mas sim 
        //zerando o valor e retornando o valor novo.
        
        //Pure function é um conceito de programação funcional,
        //onde recebemos um valor e não o alteramos mas 
        //retornamos um valor novo a partir dele.
        setNome(estadoAnterior => {
            console.log(estadoAnterior);

            return evento.target.value;
        })
    }
;
    const renderizaResultado = () => {
        const soma = materiaA + materiaB + materiaC;
        const media = soma / 3;

        if (media >= 7) {
            return (
                <p>Você foi aprovado</p>
            )
        } else {
            return (
                <p>Você não foi aprovado</p>
            )
        }
    }
    
    return (
        <form>
            <input type="text" placeholder="Seu nome" onChange={alteraNome} />
            <input type="number" placeholder="Nota matéria A" onChange={evento => setMateriaA(parseInt(evento.target.value))} />
            {/* Desestruturação do evento */}
            {/* <input type="number" placeholder="Nota matéria A" onChange={({target}) => setMateriaA(parseInt(target.value))} /> */}
            <input type="number" placeholder="Nota matéria B" onChange={evento => setMateriaB(parseInt(evento.target.value))} />
            <input type="number" placeholder="Nota matéria C" onChange={evento => setMateriaC(parseInt(evento.target.value))} />
            {renderizaResultado()}
        </form>
    )
}

export default Formulario


-----------------------------------------------------------------------------------

***Manipulando o estado e trabalhando com eventos no React***
***Reatividade com a função useEffect()***
+++O useEffect é um Hook que serve para lidar com os efeitos. Podemos usá-los como os lifeCycles componentDidMount, componentDidUpdate e componentWillUnmount.+++
+++O useEffect() recebe como primeiro parâmetro uma função que será executada assim que o componente renderizar. Então é um ótimo lugar para fazer requisições.+++

-Há diversas funções com prefixo 'use' no React. Refere-se a elas como "Hook" (Anzol ou gancho)
-Representam uma junção entre um estado do React e o HTML (DOM)
-useEffect não é armazenado numa variável ou constante, chama-se a função e ela pode receber uma arrow function ou uma function
-O conteúdo da função useEffect será executado sempre que houver uma mudança no estado
-useEffect aceita uma função e uma lista de dependências ou condicionalidade para sua execução
  
"useEffect(effect: React.EffectCallback, deps?: React.DependencyList | undefined): void
If present, effect will only activate if the values in the list change.
Accepts a function that contains imperative, possibly effectful code."


**Exemplos**

let [materiaA, setMateriaA] = useState(0);
let [materiaB, setMateriaB] = useState(0);
let [materiaC, setMateriaC] = useState(0);
let [nome, setNome] = useState('');
    
useEffect(() => {
    console.log('o estado nome mudou');
  }, [nome]);

//useEffect só será executado quando a variável nome (segundo argumento da função useEffect) for modificada.

useEffect(() => {
        console.log("materia A mudou para: " + materiaA);
    }, [materiaA]);

//useEffect só será executado quando a variável materiaA (segundo argumento da função useEffect) for modificada.


useEffect(() => {
        console.log("materia A mudou para: " + materiaA);
    }, [materiaA, materiaB, materiaC]);

//useEffect só será executado quando as variável materiaA, materiaB, materiaC forem modificadas.
//(variáveis dentro da lista de dependências que é o segundo argumento de useEffect)



**Executando o useEffect apenas quando o componente for inicializado (montado)**

useEffect(() => {
    console.log('o componente iniciou');
}, []);

-Basta deixar a lista de dependências vazia


**Executando o useEffect quando o componente for finalizado (desmontado)**

useEffect(() => {
    console.log('o componente iniciou');

    return () => {
        console.log('o componente finalizou');
    }
}, []);

**Condicionando a renderização do compondente em App.jsx**

import { useState } from "react";

import Perfil from "./components/Perfil";
import Formulario from "./components/Formulario";

function App() {
  const [formularioEstaVisivel, setFormularioEstaVisivel] = useState(true);

  return ( 
    <> 
      <Perfil nome="pedro" endereco="https://github.com/pedrosimiao.png" />
      
      {formularioEstaVisivel && (
        <Formulario />
      )}

      <button onClick={() => setFormularioEstaVisivel(!formularioEstaVisivel)} type="button">toggle form</button>
    </>
  )
}

export default App

-Ciclo de vida de um compondente React (iniciado, atualizado e finalizado)
-mount
-update
-unmount


-----------------------------------------------------------------------------------

***Manipulação de listas***

-Todo conteúdo dentro de chaves é um conteúdo JS
-Função map() faz o retorno através de iteração da lista

**Usando uma arrow function como argumento da função map() para renderizar uma lista []**

<ul>
    {[1,2,3,4,5].map(item => <li>{item}</li>)}
</ul>

**Para renderização de um elemento maior utilizamos parênteses**
**Lembrar que para renderizar mais de um elemento é preciso encapsular em tags vazias**

<ul>
    {[1,2,3,4,5].map(item => (
        <>
            <b>{item}</b>
            <li>{item}</li>
        </>
    ))}
</ul>

**O React demanda que cada item da lista deve ter uma propriedade unica "key"**

<ul>
    {[1,2,3,4,5].map(item => (
        <li key={item}>{item}</li>
    ))}
</ul>


***Criando um novo componente para lidar com listagem de repositórios de uma api***
**Integração do React com uma API externa (no caso Github)

-Criar uma nova pasta chamada ReposList dentro da pasta components
-Dentro de ReposList criar um index.jsx

import { useEffect, useState } from "react";

const ReposList = () => {
    //Desestruturação do useState
    //useState instanciado como uma lista vazia
    const [repos, setRepos] = useState([]);

    //Condicionando com useState() para simulação um feedback de carregamento
    const [estaCarregando, setEstaCarregando] = useState(true);

    //Executando o useEffect apenas quando o componente for inicializado
    //Argumento será uma arrow funtion que chama o fetch API
    //a resposta do fetch é então convertida em um arquivo json
    //logo após a alocação desse arquivo json é realizada também através de uma arrow function
    //utilizando o setRepos de useState para armazená-lo na lista repos que foi instanciada vazia.
    //Verificar atributos da API convertida em Json para uso. (id, name, language, html_url e outros caso seja necessário)
    useEffect(() => {
        fetch('https://api.github.com/users/pedrosimiao/repos')
        .then(res => res.json())
        .then(resJson => {
            //Simulando um feedback de carregamento através do condicionamento 'estaCarregando'
            setTimeout(() => {
                setEstaCarregando(false);
                setRepos(resJson);
            }, 3000)
        })
    },[]) 
    //lista vazia como segundo argumento (assim que o componente for montado, 
    //pegar listagem repositórios na api do usuário github e preenche a lista com o conteúdo requerido no return)

    
    return (
        <>
            {/* h1 só srá renderizado caso está carregando seja true */}
            {estaCarregando && (
                <h1>Carregando...</h1>
            )}
            <ul>
                {/* {repos.map(repositorio => ( */}
                {/* Desestruturação dos itens da lista */}
                {repos.map(({id, name, language, html_url}) => (
                    <li key={id}>
                        {/* A propriedade id é usada como identificador único para cada repositório da api do github retornada pelo fetch */}
                        <b>Nome: </b> {name} <br />
                        <b>Linguagem: </b> {language} <br />
                        <a target="_blank" href={html_url}>Visitar no Github</a> <br /> <br />
                        {/* Atributo target="_blank" para abrir link em outra janela */}
                    </li>
                ))}
            </ul>
        </>
    )
}

export default ReposList;



-----------------------------------------------------------------------------------

***CSS Modules***
**Estilizando os componentes**

-No compondente Perfil/index.jsx mudar tags para fazer mais sentido semânticamente
-Além disso substituir parâmetros na desestruturação de Perfil
trocando [nome, endereco] por [nomeUsuario]

const Perfil = ({nomeUsuario}) => {    
    return (
        <header>
            <img className='perfil-avatar' src={`https://github.com/${nomeUsuario}.png`} />
            <h1 className='perfil-titulo'>{nomeUsuario}</h1>
        </header>
    )
}

-Em App.jsx

<> 
      <Perfil nomeUsuario="pedrosimiao" />
      ...
</>

-Excluir arquivo perfil.css

**Ferramente React - CSS Modules**
**Tratar as classes de CSS como se fossem atributos de objetos**

-Criar novo arquivo Perfil.module.css no compondente Perfil
e em index.jsx de Perfil:

import styles from './Perfil.mpdule.css';

-Usar as classes css nas tags

Exemplo:
<header className={styles.header}>

-Em src criar um arquivo de estilo global.css contendo o reset

-Importar estilo global em main.jsx
import './global.css'; 


**Variáveis no CSS**

:root {
    --corPrincipal: #4834d4; *variável
    --corSecundaria: #111; *variável
}

-utilizando a variável no module.css
Exemplo:

background-color: var(--corPrincipal);
border: 2px solid var(--corSecundaria);
color: var(--corSecundaria);



***Alterando a página para exibir usuario e repositórios pelo nome inserido num input text***

-Em ./ReposList/index.jsx

import { useEffect, useState } from "react";

import styles from './ReposList.module.css'

const ReposList = ({ nomeUsuario }) => { //atributo nomeUsuario para exibiçao de titulo e foto 
    //Desestruturação do useState
    //useState instanciado como uma lista vazia
    const [repos, setRepos] = useState([]);

    //Condicionando com useState() para simulação um feedback de carregamento
    const [estaCarregando, setEstaCarregando] = useState(true);

    //Executando o useEffect apenas quando o componente for inicializado
    //Argumento será uma arrow funtion que chama o fetch API
    //a resposta do fetch é então convertida em um arquivo json
    //logo após a alocação desse arquivo json é realizada também através de uma arrow function
    //utilizando o setRepos de useState para armazená-lo na lista repos que foi instanciada vazia.
    //Verificar atributos da API convertida em Json para uso. (id, name, language, html_url e outros caso seja necessário)
    useEffect(() => {
        //atribuindo o valor true na montagem para que lista e "Carregando..." 
        //não sejam renderizados concomitantemente ao mudar nome do usuário pelo input em App.jsx
        setEstaCarregando(true) 
        fetch(`https://api.github.com/users/${nomeUsuario}/repos`)
        .then(res => res.json())
        .then(resJson => {
            //Simulando um feedback de carregamento através do condicionamento 'estaCarregando'
            setTimeout(() => {
                setEstaCarregando(false);
                setRepos(resJson);
            }, 3000)
        })
    },[nomeUsuario]) //useEffect só será executado após definição de nomeUsuario 
    //lista vazia como segundo argumento (assim que o componente for montado, 
    //pegar listagem repositórios na api do usuário github e preenche a lista com o conteúdo requerido no return)

    
    return (
        <div className="container">
            {/* h1 só srá renderizado caso está carregando seja true */}
            {estaCarregando ? (
                <h1>Carregando...</h1>
            ) : (
                <ul className={styles.list}>
                    {/* {repos.map(repositorio => ( */}
                    {/* Desestruturação dos itens da lista */}
                    {repos.map(({id, name, language, html_url}) => (
                        <li className={styles.listItem} key={id}>
                            {/* A propriedade id é usada como identificador único para cada repositório da api do github retornada pelo fetch */}
                            <div className={styles.itemName}>
                                <b>Nome: </b> 
                                {name}
                            </div>
                            <div className={styles.itemLanguage}>
                                <b>Linguagem: </b> 
                                {language}
                            </div>
                            <a className={styles.itemLink} target="_blank" href={html_url}>Visitar no Github</a>
                            {/* Atributo target="_blank" para abrir link em outra janela */}
                        </li>
                    ))}
                </ul>
            )}
        </div>
    )
}

export default ReposList;



-Em App.jsx

import { useState } from "react";

import Perfil from "./components/Perfil";
import Formulario from "./components/Formulario";
import ReposList from "./components/ReposList";

function App() {
  const [formularioEstaVisivel, setFormularioEstaVisivel] = useState(true);
  const [nomeUsuario, setNomeUsuario] = useState('');

  return ( 
    <> 
      <input type="text" onBlur={(e) => setNomeUsuario(e.target.value)}/>
      
      {/* Condicionando renderização dos componentes Perfil e ReposList após preenchimento do nome no input */}
      {nomeUsuario.length >= 4 && (
        <>
          <Perfil nomeUsuario={nomeUsuario} />
          <ReposList nomeUsuario={nomeUsuario}/>
        </>
      )}


      
      {/* {formularioEstaVisivel && (
        <Formulario />
      )} */}

      {/* <button onClick={() => setFormularioEstaVisivel(!formularioEstaVisivel)} type="button">toggle form</button> */}
    </>
  )
}

export default App